/***************************************************\
| Danny Burrows                                     |
| burrowsd@onid.oregonstate.edu                     |
| CS362 - Software Engineering 2                    |
| Assignment # 2                                    |
| refactor.txt                                      |
|                                                   |
| This file tracks changes during refactoring of    |
| domiminion.c file. I refactored every card as a   |
| result of hating the results when just 5 were     |
| completed. If you must only look at five look     |
| at these:                                         |
| -smithy                                           |
| -baron                                            |
| -tribute                                          |
| -salvager                                         |
| -treasuremap                                      |
|                                                   |
| The changes were marked so I did not lose them    |
| after coming back to the code after some time.    |
| I did add a flag to the makefile to get this      |
| to compile: -std=c99                              |
| This is specifically to allow integer             |
| decelarations inisde a for loop.                  |
\***************************************************/


int drawAdventurerCard(int currentPlayer, struct gameState *state)
{
  int drawntreasure=0;
  int cardDrawn;
  int z = 0;

  int temphand[MAX_HAND];// moved above the if statement

  while(drawntreasure<2)
  {
    if (state->deckCount[currentPlayer] <1) //if the deck is empty we need to shuffle discard and add to deck
    {
      shuffle(currentPlayer, state);
    }
    drawCard(currentPlayer, state);
    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      drawntreasure++;
    else
    {
      temphand[z]=cardDrawn;
      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      z++;
    }
  }
  while(z-1>=0)
  {
    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    z=z-1;
  }
  return 0;
}

int drawAmbassadorCard(int currentPlayer, int *choices, struct gameState *state, int handPos)
{
  int j = 0;    //used to check if player has enough cards to discard

  if (choices[1] > 2 || choices[1] < 0)
    return -1;        

  if (choices[0] == handPos)
    return -1;

  for (int i = 0; i < state->handCount[currentPlayer]; i++)
  {
    if (i != handPos && i == state->hand[currentPlayer][choices[0]] && i != choices[0])
      j++;
  }
  if (j < choices[1])
    return -1;        

  if (DEBUG) 
    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choices[0]]);

  //increase supply count for choosen card by amount being discarded
  state->supplyCount[state->hand[currentPlayer][choices[0]]] += choices[1];

  //each other player gains a copy of revealed card
  for (int i = 0; i < state->numPlayers; i++)
  {
    if (i != currentPlayer)
      gainCard(state->hand[currentPlayer][choices[0]], state, 0, i);
  }

  //discard played card from hand
  discardCard(handPos, currentPlayer, state, 0);      

  //trash copies of cards returned to supply
  for (int j = 0; j < choices[1]; j++)
  {
    for (int i = 0; i < state->handCount[currentPlayer]; i++)
    {
      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choices[0]])
      {
        discardCard(i, currentPlayer, state, 1);
        break;
      }
    }
  }     

  return 0;
}

int drawBaronCard(int currentPlayer, int *choices, struct gameState *state)
{
  state->numBuys++;//Increase buys by 1!
  if (choices[0] > 0) //Boolean true or going to discard an estate
    { 
    int p = 0;//Iterator for hand!
    int card_not_discarded = 1;//Flag for discard set!
    while(card_not_discarded)
    {
      if (state->hand[currentPlayer][p] == estate) //Found an estate card!
      {
        state->coins += 4;//Add 4 coins to the amount of coins
        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        state->discardCount[currentPlayer]++;
        
        for (;p < state->handCount[currentPlayer]; p++)
        {
          state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        }
        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        state->handCount[currentPlayer]--;
        card_not_discarded = 0;//Exit the loop
      }
      else if (p > state->handCount[currentPlayer])
      {
        if(DEBUG)
        {
          printf("No estate cards in your hand, invalid choice\n");
          printf("Must gain an estate if there are any\n");
        }
        if (supplyCount(estate, state) > 0)
        {
          //gainCard(estate, state, 0, currentPlayer);
          gainCard(estate, state, 1, currentPlayer); // fault insertion, adding toCard == 1 means that player does not get cards
          state->supplyCount[estate]--;//Decrement estates
          if (supplyCount(estate, state) == 0){
            isGameOver(state);
          }
        }
        card_not_discarded = 0;//Exit the loop
      }
      else{
        p++;//Next card
      }
    }
  }

  else
  {
    if (supplyCount(estate, state) > 0)
    {
      gainCard(estate, state, 0, currentPlayer);//Gain an estate
      state->supplyCount[estate]--;//Decrement Estates
      if (supplyCount(estate, state) == 0)
      {
        isGameOver(state);
      }
    }
  }

  return 0;
}

int drawCouncilRoomCard(int currentPlayer, struct gameState *state, int handPos)
{
  //+4 Cards
  for (int i = 0; i < 4; i++)
    drawCard(currentPlayer, state);
  
  //+1 Buy
  state->numBuys++;
    
  //Each other player draws a card
  for (int i = 0; i < state->numPlayers; i++)
  {
    if ( i != currentPlayer )
      drawCard(i, state);
  }
    
  //put played card in played card pile
  discardCard(handPos, currentPlayer, state, 0);
    
  return 0;
}

int drawCutPurseCard(int currentPlayer, struct gameState *state, int handPos)
{
  updateCoins(currentPlayer, state, 2);
  for (int i = 0; i < state->numPlayers; i++)
  {
    if (i != currentPlayer)
    {
      for (int j = 0; j < state->handCount[i]; j++)
      {
        if (state->hand[i][j] == copper)
        {
          discardCard(j, i, state, 0);
          break;
        }
        if (j == state->handCount[i])
        {
          for (int k = 0; k < state->handCount[i]; k++)
          {
            if (DEBUG)
              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
          } 
          break;
        }   
      }
    }
  }       

  //discard played card from hand
  discardCard(handPos, currentPlayer, state, 0);      

  return 0;
}

int drawEmbargoCard(int currentPlayer, int *choices, struct gameState *state, int handPos)
{
  //+2 Coins
  state->coins = state->coins + 2;
    
  //see if selected pile is in play
  if ( state->supplyCount[choices[0]] == -1 )
    return -1;
    
  //add embargo token to selected supply pile
  state->embargoTokens[choices[0]]++;
    
  //trash card
  discardCard(handPos, currentPlayer, state, 1);    
  return 0; 
}

int drawFeastCard(int currentPlayer, int *choices, struct gameState *state)
{
  int temphand[MAX_HAND];// moved above the if statement

  //gain card with cost up to 5
  //Backup hand
  for (int i = 0; i <= state->handCount[currentPlayer]; i++)
  {
    temphand[i] = state->hand[currentPlayer][i];//Backup card
    state->hand[currentPlayer][i] = -1;//Set to nothing
  }
  //Backup hand

  //Update Coins for Buy
  updateCoins(currentPlayer, state, 5);
  int x = 1;//Condition to loop on
  while( x == 1) //Buy one card
  {
    if (supplyCount(choices[0], state) <= 0)
    {
      if (DEBUG)
        printf("None of that card left, sorry!\n");

      if (DEBUG)
        printf("Cards Left: %d\n", supplyCount(choices[0], state));
    }

    else if (state->coins < getCost(choices[0]))
    {
      printf("That card is too expensive!\n");

      if (DEBUG)
        printf("Coins: %d < %d\n", state->coins, getCost(choices[0]));
    }
    else
    {

      if (DEBUG)
        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);     

      gainCard(choices[0], state, 0, currentPlayer);//Gain the card
      x = 0;//No more buying cards

      if (DEBUG)
        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
    }
  }     

  //Reset Hand
  for (int i = 0; i <= state->handCount[currentPlayer]; i++)
  {
    state->hand[currentPlayer][i] = temphand[i];
    temphand[i] = -1;
  }
  //Reset Hand
        
  return 0;
}

int drawGreatHallCard(int currentPlayer, struct gameState *state, int handPos)
{
  //+1 Card
  drawCard(currentPlayer, state);
    
  //+1 Actions
  state->numActions++;
    
  //discard card from hand
  discardCard(handPos, currentPlayer, state, 0);
  return 0;
}

int drawMineCard(int currentPlayer, int *choices, struct gameState *state, int handPos)
{
  int j = state->hand[currentPlayer][choices[0]];  //store card we will trash

  if (state->hand[currentPlayer][choices[0]] < copper || state->hand[currentPlayer][choices[0]] > gold)
    return -1;

  if (choices[1] > treasure_map || choices[1] < curse)
    return -1;

  if ( (getCost(state->hand[currentPlayer][choices[0]]) + 3) > getCost(choices[1]) )
    return -1;

  gainCard(choices[1], state, 2, currentPlayer);

  //discard card from hand
  discardCard(handPos, currentPlayer, state, 0);

  //discard trashed card
  for (int i = 0; i < state->handCount[currentPlayer]; i++)
  {
    if (state->hand[currentPlayer][i] == j)
    {
      discardCard(i, currentPlayer, state, 0);      
      break;
    }
  }

  return 0; 
}

int drawMinionCard(int currentPlayer, int *choices, struct gameState *state, int handPos)
{
  //+1 action
  state->numActions++;

  //discard card from hand
  discardCard(handPos, currentPlayer, state, 0);

  if (choices[0])   //+2 coins
    state->coins = state->coins + 2;

  else if (choices[1])    //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
  {
    //discard hand
    while(numHandCards(state) > 0)
      discardCard(handPos, currentPlayer, state, 0);

    //draw 4
    for (int i = 0; i < 4; i++)
      drawCard(currentPlayer, state);


    //other players discard hand and redraw if hand size > 4
    for (int i = 0; i < state->numPlayers; i++)
    {
      if (i != currentPlayer)
      {
        if ( state->handCount[i] > 4 )
        {
          //discard hand
          while( state->handCount[i] > 0 )
            discardCard(handPos, i, state, 0);
          
          //draw 4
          for (int j = 0; j < 4; j++)
            drawCard(i, state);
        }
      }
    }
  }
  return 0;
}

int drawOutpostCard(int currentPlayer, struct gameState *state, int handPos)
{
  //set outpost flag
  state->outpostPlayed++;

  //discard card
  discardCard(handPos, currentPlayer, state, 0);
  return 0;
}

int drawRemodelCard(int currentPlayer, int *choices, struct gameState *state, int handPos)
{
  int j = state->hand[currentPlayer][choices[0]];  //store card we will trash

  if ( (getCost(state->hand[currentPlayer][choices[0]]) + 2) > getCost(choices[1]) )
    return -1;

  gainCard(choices[1], state, 0, currentPlayer);

  //discard card from hand
  discardCard(handPos, currentPlayer, state, 0);

  //discard trashed card
  for (int i = 0; i < state->handCount[currentPlayer]; i++)
  {
    if (state->hand[currentPlayer][i] == j)
    {
      discardCard(i, currentPlayer, state, 0);      
      break;
    }
  }
}


int drawSalvagerCard(int currentPlayer, int *choices, struct gameState *state, int handPos)
{
  //+1 buy
  state->numBuys++;

  if (choices[0])
  {
    //gain coins equal to trashed card
    state->coins = state->coins + getCost( handCard(choices[0], state) );
    //trash card
    discardCard(choices[0], currentPlayer, state, 1); 
  }

  //discard card
  discardCard(handPos, currentPlayer, state, 0);
  return 0;
}

int drawSeaHagCard(int currentPlayer, struct gameState *state)
{
  for (int i = 0; i < state->numPlayers; i++)
  {
    if (i != currentPlayer)
    {
      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
      state->deckCount[i]--;
      state->discardCount[i]++;
      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    }
  }
  return 0;
}

int drawSmithyCard(int currentPlayer, struct gameState *state, int handPos)
{
  //+3 Cards
  for (int i = 0; i < 3; i++)
    drawCard(currentPlayer, state);
    
  //discard card from hand
  discardCard(handPos, currentPlayer, state, 0);
  return 0; 
}

int drawStewardCard(int currentPlayer, int *choices, struct gameState *state, int handPos)
{
  if (choices[0] == 1)
  {
    //+2 cards
    drawCard(currentPlayer, state);
    drawCard(currentPlayer, state);
  }
  else if (choices[0] == 2)
  {
    //+2 coins
    state->coins = state->coins + 2;
  }
  else
  {
    //trash 2 cards in hand
    discardCard(choices[1], currentPlayer, state, 1);
    discardCard(choices[2], currentPlayer, state, 1);
  }
    
  //discard card from hand
  discardCard(handPos, currentPlayer, state, 0);
  return 0;
}

int drawTreasureMapCard(int currentPlayer, struct gameState *state, int handPos)
{
  //search hand for another treasure_map
  int index = -1;
  for (int i = 0; i < state->handCount[currentPlayer]; i++)
  {
    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    {
      index = i;
      break;
    }
  }
  if (index > -1)
  {
    //trash both treasure cards
    discardCard(handPos, currentPlayer, state, 1);
    discardCard(index, currentPlayer, state, 1);

    //gain 4 Gold cards
    for (int i = 0; i < 4; i++)
      gainCard(gold, state, 1, currentPlayer);
  
    //return success
    return 1;
  }

  //no second treasure_map found in hand
  return -1;
}

/* swapped all increments and decrementers */
int drawTributeCard(int currentPlayer, struct gameState *state)
{
  int nextPlayer = currentPlayer + 1;
  int tributeRevealedCards[2] = {-1, -1};

  if (nextPlayer > (state->numPlayers - 1))
    nextPlayer = 0;

  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
  {
    if (state->deckCount[nextPlayer] > 0)
    {
      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
      state->deckCount[nextPlayer]++;
    }
    else if (state->discardCount[nextPlayer] > 0)
    {
      tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
      state->discardCount[nextPlayer]++;
    }
  else
    {
      //No Card to Reveal
      if (DEBUG)
      {
        printf("No cards to reveal\n");
      }
    }
  }

  else
  {
    if (state->deckCount[nextPlayer] == 0)
    {
      for (int i = 0; i < state->discardCount[nextPlayer]; i++)
      {
        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        state->deckCount[nextPlayer]--;
        state->discard[nextPlayer][i] = -1;
        state->discardCount[nextPlayer]++;
      }
          
      shuffle(nextPlayer,state);//Shuffle the deck
    } 
    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    state->deck[nextPlayer][state->deckCount[nextPlayer]++] = -1;
    state->deckCount[nextPlayer]--;
    tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    state->deck[nextPlayer][state->deckCount[nextPlayer]++] = -1;
    state->deckCount[nextPlayer]++;
  }    
         
  if (tributeRevealedCards[0] == tributeRevealedCards[1])
  {//If we have a duplicate card, just drop one 
    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    state->playedCardCount++;
    tributeRevealedCards[1] = -1;
  }

  for (int i = 0; i <= 2; i++)
  {
    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) //Treasure cards
    {
      state->coins += 2;
    }
        
    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
      drawCard(currentPlayer, state);
      drawCard(currentPlayer, state);
    }
    else
    {//Action Card
      state->numActions = state->numActions + 2;
    }
  }

  return 0;
}


int drawVillageCard(int currentPlayer, struct gameState *state, int handPos)
{
  //+1 Card
  drawCard(currentPlayer, state);
    
  //+2 Actions
  state->numActions = state->numActions + 2;
    
  //discard played card from hand
  discardCard(handPos, currentPlayer, state, 0);
  return 0;
}


int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
{
  int currentPlayer = whoseTurn(state);

  /* changed for my own sanity */
  int *choices = (int *)malloc(sizeof(int) * 3);
  choices[0] = choice1;
  choices[1] = choice2;
  choices[2] = choice3;
	
  //uses switch to select card and perform actions
  switch( card ) 
  {
    case adventurer:
      return drawAdventurerCard(currentPlayer, state);

    case ambassador:
      return drawAmbassadorCard(currentPlayer, choices, state, handPos);

    case baron:
      return drawBaronCard(currentPlayer, choices, state);

    case council_room:
      return drawCouncilRoomCard(currentPlayer, state, handPos);

    case cutpurse:
      return drawCutPurseCard(currentPlayer, state, handPos);

    case embargo:
      return drawEmbargoCard(currentPlayer, choices, state, handPos);

    case feast:
      return drawFeastCard(currentPlayer, choices, state);

    case great_hall:
      return drawGreatHallCard(currentPlayer, state, handPos);

    case mine:
      return drawMineCard(currentPlayer, choices, state, handPos);

    case minion:
      return drawMinionCard(currentPlayer, choices, state, handPos);

    case outpost:
      return drawOutpostCard(currentPlayer, state, handPos);

    case remodel:
      return drawRemodelCard(currentPlayer, choices, state, handPos);

    case salvager:
      return drawSalvagerCard(currentPlayer, choices, state, handPos);

    case sea_hag:
      return drawSeaHagCard(currentPlayer, state);

    case smithy:
      return drawSmithyCard(currentPlayer, state, handPos);

    case steward:
      return drawStewardCard(currentPlayer, choices, state, handPos);

    case treasure_map:
      return drawTreasureMapCard(currentPlayer, state, handPos);

    case tribute:
      return drawTributeCard(currentPlayer, state);

    case village:
      return drawVillageCard(currentPlayer, state, handPos);
  }
  return -1
 }